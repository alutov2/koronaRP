---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MRV.
--- DateTime: 10/12/2022 19:29
---

---@module CPersonalMenu
local m = iAm("personalmenu")
---@type CCFGPersonalMenu
local CFG <const> = m:CFG()

---@type CVoice
local voice = Modules.Get("voice")

---@type CInventory
local inventory = Modules.Get("inventory")

---@type CBilling
local billing = Modules.Get("billing-gta5")

local diving = Modules.Get("diving-gta5")

---@type CItems
local items = Modules.Get("items")

m.streamerMode = false

function m.GetPersonalMenu(cb)
	if not m.personalMenu then
		m:On("personalMenuCreated", function()
			cb(m.personalMenu)
		end)

		return
	end

	cb(m.personalMenu)
end

function m.CreatePersonalMenu()
	---@type xMenu
	m.personalMenu = IMPOSTEUR.Classes.xMenu("personal_menu", "Menu personnel", "Catégories disponibles")
	m:Emit("personalMenuCreating")

	m.AddSkillsMenu()

	if IS_RDR3 then
		m.AddWalkingStyles()
	end

	if voice then
		--m.AddVoiceModes()
	end

	m.AddAccountMenu()

	m.AddBillingMenu()

	m.AddRockstarEditorMenu()

	m.AddOtherMenu()

	m.AddTestMenu()

	m:Emit("personalMenuCreated")
end

function m.OpenPersonalMenu()
	m.personalMenu:Show(true)
end

function m.AddSkillsMenu()
	if not GlobalCFG.Skills or not next(GlobalCFG.Skills) then
		return
	end
	m.skillsMenu = IMPOSTEUR.Classes.xMenu("personal_skills_menu", "Compétences", "Liste des compétences")
	m.personalMenu:AddSubmenu(m.skillsMenu)

	m.skillsMenu:on("open", function()
		m.LoadSkillsMenu()
	end)
end

function m.LoadSkillsMenu()
	local GM_DATA = CPlayer.Get("GM")
	local skills = GM_DATA.character.skills

	m.skillsMenu:Reset()

	for skillType, skillData in pairs(skills) do
		local skillBtn =
			m.skillsMenu:AddButton(GlobalCFG.Skills[skillType].label, GlobalCFG.Skills[skillType].description)

		skillBtn:SetRightText(IMPOSTEUR.GetSkillStageByPoints(skillData.points))
	end

	m.skillsMenu:Refresh() -- Refresh menu
end

function m.AddWalkingStyles()
	local lastWalkingStyle = nil
	local walkingStylesLabel = {}

	for i = 1, #CFG.WalkingStyles do
		walkingStylesLabel[#walkingStylesLabel + 1] = CFG.WalkingStyles[i].label
	end

	m.personalMenu:AddList("Démarche", walkingStylesLabel):on("listChange", function(listIndex)
		if CPlayer.Get("StopWalkingStyleChange") then
			GAME.Notification("~COLOR_RED~Impossible~s~ de changer de démarche.")
			return
		end

		local playerPed = CPlayer().Ped

		if lastWalkingStyle then
			SetPedBlackboardBool(playerPed, lastWalkingStyle, false, -1)
		end

		local walkingStyle = CFG.WalkingStyles[listIndex]
		lastWalkingStyle = walkingStyle.name

		SetPedBlackboardBool(playerPed, lastWalkingStyle, true, -1)
		GAME.Notification("Nouvelle démarche : ~COLOR_BLUE~" .. walkingStyle.label)
	end)
end

function m.AddVoiceModes()
	local voiceModesCfg = voice:CFG().VoiceModes
	local voiceModesLabel = {}

	for i = 1, #voiceModesCfg do
		voiceModesLabel[#voiceModesLabel + 1] = voiceModesCfg[i][2]
	end

	m.personalMenu
		:AddList("Mode de voix", voiceModesLabel, "Changer la portée de la voix", voice.voiceModeIdx)
		:on("listChange", function(listIndex)
			local voiceMode = voiceModesCfg[listIndex]
			voice.SetVoiceMode(listIndex)
			GAME.Notification("Nouveau mode de voix : ~COLOR_BLUE~" .. voiceMode[2])
		end)
end

function m.AddVipMenu()
	m.vipMenu = IMPOSTEUR.Classes.xMenu("personal_vip_menu", "VIP", "Liste des actions VIP")
	m.personalMenu:AddSubmenu(m.vipMenu):SetIcon("fa-regular fa-crown")

	if IS_RDR3 then
		m.vipMenu
			:AddButton("Activer votre boost de farm", "Un boost de farm (récolte) durant 2h")
			:on("buttonPress", function()
				IMPOSTEUR.EmitServer("askForFarmBoost")
			end)
	end
end

function m.AddAccountMenu()
	m.accountMenu = IMPOSTEUR.Classes.xMenu("personal_account_menu", "Compte", "Liste des actions")
	m.personalMenu:AddSubmenu(m.accountMenu):SetIcon("fa-regular fa-user")

	m.personalMenu:on("open", function()
		m.LoadAccountMenu()
	end)
end

function m.LoadAccountMenu()
	m.accountMenu:Reset()

	if CPlayer.IsTemporaryAccount() then
		local btnText = ("Vous permettra de convertir votre compte temporaire en compte permanent pour éviter toute perte de progression et accéder à toutes les fonctionnalités du jeu. (%s %s offert en boutique)"):format(
			IMPOSTEUR.LocalizeShopToken(GlobalCFG.PermanentAccountShopTokensReward),
			IMPOSTEUR.GetLocalizedShopTokenName()
		)

		m.accountMenu:AddButton("Créer un compte permanent", btnText):on("buttonPress", function()
			if not CPlayer.IsTemporaryAccount() then
				m.LoadAccountMenu()
				return
			end

			IMPOSTEUR.Emit("auth:openRegisterUi")
		end)
	end

	m.accountMenu:Refresh()
end

function m.AddRockstarEditorMenu()
	m.rockstarEditorMenu =
		IMPOSTEUR.Classes.xMenu("personal_rockstareditor_menu", "Rockstar Editor", "Liste des actions")
	m.personalMenu:AddSubmenu(m.rockstarEditorMenu):SetIcon("fa-regular fa-camera-movie")

	m.rockstarEditorMenu:AddButton("Démarrer un enregistrement"):on("buttonPress", function()
		StartRecording(1)
	end)

	m.rockstarEditorMenu:AddButton("Sauvegarder l'enregistrement"):on("buttonPress", function()
		StopRecordingAndSaveClip()
	end)

	m.rockstarEditorMenu:AddButton("Annuler l'enregistrement"):on("buttonPress", function()
		StopRecordingAndDiscardClip()
	end)

	m.rockstarEditorMenu
		:AddButton(
			"Ouvrir le Rockstar Editor",
			"⚠️ Si vous ouvrez le Rockstar Editor vous serez déconnecté du serveur ⚠️"
		)
		:on("buttonPress", function()
			m.rockstarEditorMenu:Show(false, true)
			NetworkSessionLeaveSinglePlayer()
			ActivateRockstarEditor()
		end)
end

function m.AddBillingMenu()
	m.billingMenu = IMPOSTEUR.Classes.xMenu("personal_billing_menu", "Factures impayés", "Liste des actions")
	local menu = m.billingMenu

	m.personalMenu:AddSubmenu(menu):SetIcon("fa-regular fa-money-bill")

	menu:on("open", function()
		m.LoadBillingMenu(menu)
	end)
end

function m.LoadBillingMenu(menu)
	local GM_DATA = CPlayer.Get("GM")
	local permanentBills = GM_DATA.character.permanentBills

	menu:Reset()

	for i = 1, #permanentBills do
		local bill = permanentBills[i]
		menu:AddButton(bill.reason)
			:SetRightText(IMPOSTEUR.LocalizeCurrency("cash", bill.amount, true))
			:SetDescription("Payer la facture")
			:on("buttonPress", function()
				billing.PayPermanentBill(menu, i)
			end)
	end
end

function m.AddOtherMenu()
	m.otherMenu = IMPOSTEUR.Classes.xMenu("personal_other_menu", "Autre", "Liste des actions")
	m.personalMenu:AddSubmenu(m.otherMenu):SetIcon("fa-regular fa-gear")

	m.otherMenu:AddCheckbox("Interface GPS", true):on("checkboxChange", function(checked)
		DisplayRadar(checked)
	end)

	m.otherMenu:AddCheckbox("Interface personnage", true):on("checkboxChange", function(checked)
		inventory.ChangeHudComponentVisibility(inventory.HudComponent.STATUSES, checked)
	end)

	m.otherMenu:AddCheckbox("Mode streamer", m.streamerMode):on("checkboxChange", function(checked)
		m.streamerMode = checked
	end)

	--m.otherMenu:AddCheckbox("Interface radio", true)
	--    :on("checkboxChange", function(checked)
	--    end)

	m.otherMenu:AddCheckbox("Interface cinématique"):on("checkboxChange", function(checked)
		if checked then
			inventory.ChangeHudComponentVisibility(inventory.HudComponent.NOTIFICATIONS, false)
			m.cinematicNuiFrame:Show()
		else
			inventory.ChangeHudComponentVisibility(inventory.HudComponent.NOTIFICATIONS, true)
			m.cinematicNuiFrame:Hide()
		end
	end)

	if items then
		m.otherMenu:AddCheckbox("Tir à blanc", m.blankShotEnabled):on("checkboxChange", function(checked)
			items.EnableBlankshot(checked)

			local msg = checked and "Tir à blanc activé !" or "Tir à blanc désactivé !"
			GAME.Notification(msg)
		end)
	end

	if diving then
		m.otherMenu:AddButton("Déséquipper masque de plongée"):on("buttonPress", function()
			diving.UnequipDivingMask()
		end)
	end
end

function m.AddTestMenu()
	m.testMenu = IMPOSTEUR.Classes.xMenu("personal_test_menu", "Test", "Liste des actions")
	m.personalMenu:AddSubmenu(m.testMenu):SetIcon("fa-regular fa-flask")

	m.testMenu:AddButton("Test action"):on("buttonPress", function()
		print("Test action")
	end)
end

IMPOSTEUR.On("nui:ready", function()
	m.cinematicNuiFrame =
		IMPOSTEUR.AddFrame("personal_menu", ("%s/cinematic_nui/index.html"):format(m:GetCfxNuiPath()), false)
	m.cinematicNuiFrame:Top()
end)
